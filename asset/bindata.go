// Code generated by go-bindata.
// sources:
// README.md
// audio.html
// dashboard.html
// favicon.ico
// jquery-1.11.3.min.js
// list.html
// picture.html
// style.css
// video.html
// jPlayer/skin/blue.monday/mustache/jplayer.blue.monday.audio.playlist.html
// jPlayer/skin/blue.monday/mustache/jplayer.blue.monday.audio.stream.html
// jPlayer/skin/blue.monday/mustache/jplayer.blue.monday.video.playlist.html
// jPlayer/skin/blue.monday/mustache/jplayer.blue.monday.video.single.html
// jPlayer/skin/blue.monday/mustache/jplayer.blue.monday.audio.single.html
// jPlayer/skin/blue.monday/image/jplayer.blue.monday.jpg
// jPlayer/skin/blue.monday/image/jplayer.blue.monday.seeking.gif
// jPlayer/skin/blue.monday/image/jplayer.blue.monday.video.play.png
// jPlayer/skin/blue.monday/css/jplayer.blue.monday.min.css
// jPlayer/skin/blue.monday/css/jplayer.blue.monday.css
// jPlayer/jplayer/jquery.jplayer.min.js
// jPlayer/jplayer/jquery.jplayer.swf
// jPlayer/jplayer/jquery.jplayer.js
// jPlayer/popcorn/popcorn.jplayer.js
// jPlayer/popcorn/popcorn.jplayer.min.js
// jPlayer/add-on/jquery.jplayer.inspector.js
// jPlayer/add-on/jquery.jplayer.inspector.min.js
// jPlayer/add-on/jplayer.playlist.js
// jPlayer/add-on/jplayer.playlist.min.js
// DO NOT EDIT!

package asset

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// readmeMd reads file data from disk. It returns an error on failure.
func readmeMd() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/README.md"
	name := "README.md"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// audioHtml reads file data from disk. It returns an error on failure.
func audioHtml() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/audio.html"
	name := "audio.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// dashboardHtml reads file data from disk. It returns an error on failure.
func dashboardHtml() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/dashboard.html"
	name := "dashboard.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// faviconIco reads file data from disk. It returns an error on failure.
func faviconIco() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/favicon.ico"
	name := "favicon.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jquery1113MinJs reads file data from disk. It returns an error on failure.
func jquery1113MinJs() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/jquery-1.11.3.min.js"
	name := "jquery-1.11.3.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// listHtml reads file data from disk. It returns an error on failure.
func listHtml() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/list.html"
	name := "list.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// pictureHtml reads file data from disk. It returns an error on failure.
func pictureHtml() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/picture.html"
	name := "picture.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// styleCss reads file data from disk. It returns an error on failure.
func styleCss() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/style.css"
	name := "style.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// videoHtml reads file data from disk. It returns an error on failure.
func videoHtml() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/video.html"
	name := "video.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jplayerSkinBlueMondayMustacheJplayerBlueMondayAudioPlaylistHtml reads file data from disk. It returns an error on failure.
func jplayerSkinBlueMondayMustacheJplayerBlueMondayAudioPlaylistHtml() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/jPlayer/skin/blue.monday/mustache/jplayer.blue.monday.audio.playlist.html"
	name := "jPlayer/skin/blue.monday/mustache/jplayer.blue.monday.audio.playlist.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jplayerSkinBlueMondayMustacheJplayerBlueMondayAudioStreamHtml reads file data from disk. It returns an error on failure.
func jplayerSkinBlueMondayMustacheJplayerBlueMondayAudioStreamHtml() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/jPlayer/skin/blue.monday/mustache/jplayer.blue.monday.audio.stream.html"
	name := "jPlayer/skin/blue.monday/mustache/jplayer.blue.monday.audio.stream.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jplayerSkinBlueMondayMustacheJplayerBlueMondayVideoPlaylistHtml reads file data from disk. It returns an error on failure.
func jplayerSkinBlueMondayMustacheJplayerBlueMondayVideoPlaylistHtml() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/jPlayer/skin/blue.monday/mustache/jplayer.blue.monday.video.playlist.html"
	name := "jPlayer/skin/blue.monday/mustache/jplayer.blue.monday.video.playlist.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jplayerSkinBlueMondayMustacheJplayerBlueMondayVideoSingleHtml reads file data from disk. It returns an error on failure.
func jplayerSkinBlueMondayMustacheJplayerBlueMondayVideoSingleHtml() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/jPlayer/skin/blue.monday/mustache/jplayer.blue.monday.video.single.html"
	name := "jPlayer/skin/blue.monday/mustache/jplayer.blue.monday.video.single.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jplayerSkinBlueMondayMustacheJplayerBlueMondayAudioSingleHtml reads file data from disk. It returns an error on failure.
func jplayerSkinBlueMondayMustacheJplayerBlueMondayAudioSingleHtml() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/jPlayer/skin/blue.monday/mustache/jplayer.blue.monday.audio.single.html"
	name := "jPlayer/skin/blue.monday/mustache/jplayer.blue.monday.audio.single.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jplayerSkinBlueMondayImageJplayerBlueMondayJpg reads file data from disk. It returns an error on failure.
func jplayerSkinBlueMondayImageJplayerBlueMondayJpg() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/jPlayer/skin/blue.monday/image/jplayer.blue.monday.jpg"
	name := "jPlayer/skin/blue.monday/image/jplayer.blue.monday.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jplayerSkinBlueMondayImageJplayerBlueMondaySeekingGif reads file data from disk. It returns an error on failure.
func jplayerSkinBlueMondayImageJplayerBlueMondaySeekingGif() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/jPlayer/skin/blue.monday/image/jplayer.blue.monday.seeking.gif"
	name := "jPlayer/skin/blue.monday/image/jplayer.blue.monday.seeking.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jplayerSkinBlueMondayImageJplayerBlueMondayVideoPlayPng reads file data from disk. It returns an error on failure.
func jplayerSkinBlueMondayImageJplayerBlueMondayVideoPlayPng() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/jPlayer/skin/blue.monday/image/jplayer.blue.monday.video.play.png"
	name := "jPlayer/skin/blue.monday/image/jplayer.blue.monday.video.play.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jplayerSkinBlueMondayCssJplayerBlueMondayMinCss reads file data from disk. It returns an error on failure.
func jplayerSkinBlueMondayCssJplayerBlueMondayMinCss() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/jPlayer/skin/blue.monday/css/jplayer.blue.monday.min.css"
	name := "jPlayer/skin/blue.monday/css/jplayer.blue.monday.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jplayerSkinBlueMondayCssJplayerBlueMondayCss reads file data from disk. It returns an error on failure.
func jplayerSkinBlueMondayCssJplayerBlueMondayCss() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/jPlayer/skin/blue.monday/css/jplayer.blue.monday.css"
	name := "jPlayer/skin/blue.monday/css/jplayer.blue.monday.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jplayerJplayerJqueryJplayerMinJs reads file data from disk. It returns an error on failure.
func jplayerJplayerJqueryJplayerMinJs() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/jPlayer/jplayer/jquery.jplayer.min.js"
	name := "jPlayer/jplayer/jquery.jplayer.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jplayerJplayerJqueryJplayerSwf reads file data from disk. It returns an error on failure.
func jplayerJplayerJqueryJplayerSwf() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/jPlayer/jplayer/jquery.jplayer.swf"
	name := "jPlayer/jplayer/jquery.jplayer.swf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jplayerJplayerJqueryJplayerJs reads file data from disk. It returns an error on failure.
func jplayerJplayerJqueryJplayerJs() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/jPlayer/jplayer/jquery.jplayer.js"
	name := "jPlayer/jplayer/jquery.jplayer.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jplayerPopcornPopcornJplayerJs reads file data from disk. It returns an error on failure.
func jplayerPopcornPopcornJplayerJs() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/jPlayer/popcorn/popcorn.jplayer.js"
	name := "jPlayer/popcorn/popcorn.jplayer.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jplayerPopcornPopcornJplayerMinJs reads file data from disk. It returns an error on failure.
func jplayerPopcornPopcornJplayerMinJs() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/jPlayer/popcorn/popcorn.jplayer.min.js"
	name := "jPlayer/popcorn/popcorn.jplayer.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jplayerAddOnJqueryJplayerInspectorJs reads file data from disk. It returns an error on failure.
func jplayerAddOnJqueryJplayerInspectorJs() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/jPlayer/add-on/jquery.jplayer.inspector.js"
	name := "jPlayer/add-on/jquery.jplayer.inspector.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jplayerAddOnJqueryJplayerInspectorMinJs reads file data from disk. It returns an error on failure.
func jplayerAddOnJqueryJplayerInspectorMinJs() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/jPlayer/add-on/jquery.jplayer.inspector.min.js"
	name := "jPlayer/add-on/jquery.jplayer.inspector.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jplayerAddOnJplayerPlaylistJs reads file data from disk. It returns an error on failure.
func jplayerAddOnJplayerPlaylistJs() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/jPlayer/add-on/jplayer.playlist.js"
	name := "jPlayer/add-on/jplayer.playlist.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jplayerAddOnJplayerPlaylistMinJs reads file data from disk. It returns an error on failure.
func jplayerAddOnJplayerPlaylistMinJs() (*asset, error) {
	path := "/home/sig/go/voyager/src/github.com/sigmonsays/voyager/asset/jPlayer/add-on/jplayer.playlist.min.js"
	name := "jPlayer/add-on/jplayer.playlist.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"README.md": readmeMd,
	"audio.html": audioHtml,
	"dashboard.html": dashboardHtml,
	"favicon.ico": faviconIco,
	"jquery-1.11.3.min.js": jquery1113MinJs,
	"list.html": listHtml,
	"picture.html": pictureHtml,
	"style.css": styleCss,
	"video.html": videoHtml,
	"jPlayer/skin/blue.monday/mustache/jplayer.blue.monday.audio.playlist.html": jplayerSkinBlueMondayMustacheJplayerBlueMondayAudioPlaylistHtml,
	"jPlayer/skin/blue.monday/mustache/jplayer.blue.monday.audio.stream.html": jplayerSkinBlueMondayMustacheJplayerBlueMondayAudioStreamHtml,
	"jPlayer/skin/blue.monday/mustache/jplayer.blue.monday.video.playlist.html": jplayerSkinBlueMondayMustacheJplayerBlueMondayVideoPlaylistHtml,
	"jPlayer/skin/blue.monday/mustache/jplayer.blue.monday.video.single.html": jplayerSkinBlueMondayMustacheJplayerBlueMondayVideoSingleHtml,
	"jPlayer/skin/blue.monday/mustache/jplayer.blue.monday.audio.single.html": jplayerSkinBlueMondayMustacheJplayerBlueMondayAudioSingleHtml,
	"jPlayer/skin/blue.monday/image/jplayer.blue.monday.jpg": jplayerSkinBlueMondayImageJplayerBlueMondayJpg,
	"jPlayer/skin/blue.monday/image/jplayer.blue.monday.seeking.gif": jplayerSkinBlueMondayImageJplayerBlueMondaySeekingGif,
	"jPlayer/skin/blue.monday/image/jplayer.blue.monday.video.play.png": jplayerSkinBlueMondayImageJplayerBlueMondayVideoPlayPng,
	"jPlayer/skin/blue.monday/css/jplayer.blue.monday.min.css": jplayerSkinBlueMondayCssJplayerBlueMondayMinCss,
	"jPlayer/skin/blue.monday/css/jplayer.blue.monday.css": jplayerSkinBlueMondayCssJplayerBlueMondayCss,
	"jPlayer/jplayer/jquery.jplayer.min.js": jplayerJplayerJqueryJplayerMinJs,
	"jPlayer/jplayer/jquery.jplayer.swf": jplayerJplayerJqueryJplayerSwf,
	"jPlayer/jplayer/jquery.jplayer.js": jplayerJplayerJqueryJplayerJs,
	"jPlayer/popcorn/popcorn.jplayer.js": jplayerPopcornPopcornJplayerJs,
	"jPlayer/popcorn/popcorn.jplayer.min.js": jplayerPopcornPopcornJplayerMinJs,
	"jPlayer/add-on/jquery.jplayer.inspector.js": jplayerAddOnJqueryJplayerInspectorJs,
	"jPlayer/add-on/jquery.jplayer.inspector.min.js": jplayerAddOnJqueryJplayerInspectorMinJs,
	"jPlayer/add-on/jplayer.playlist.js": jplayerAddOnJplayerPlaylistJs,
	"jPlayer/add-on/jplayer.playlist.min.js": jplayerAddOnJplayerPlaylistMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"README.md": &bintree{readmeMd, map[string]*bintree{}},
	"audio.html": &bintree{audioHtml, map[string]*bintree{}},
	"dashboard.html": &bintree{dashboardHtml, map[string]*bintree{}},
	"favicon.ico": &bintree{faviconIco, map[string]*bintree{}},
	"jPlayer": &bintree{nil, map[string]*bintree{
		"add-on": &bintree{nil, map[string]*bintree{
			"jplayer.playlist.js": &bintree{jplayerAddOnJplayerPlaylistJs, map[string]*bintree{}},
			"jplayer.playlist.min.js": &bintree{jplayerAddOnJplayerPlaylistMinJs, map[string]*bintree{}},
			"jquery.jplayer.inspector.js": &bintree{jplayerAddOnJqueryJplayerInspectorJs, map[string]*bintree{}},
			"jquery.jplayer.inspector.min.js": &bintree{jplayerAddOnJqueryJplayerInspectorMinJs, map[string]*bintree{}},
		}},
		"jplayer": &bintree{nil, map[string]*bintree{
			"jquery.jplayer.js": &bintree{jplayerJplayerJqueryJplayerJs, map[string]*bintree{}},
			"jquery.jplayer.min.js": &bintree{jplayerJplayerJqueryJplayerMinJs, map[string]*bintree{}},
			"jquery.jplayer.swf": &bintree{jplayerJplayerJqueryJplayerSwf, map[string]*bintree{}},
		}},
		"popcorn": &bintree{nil, map[string]*bintree{
			"popcorn.jplayer.js": &bintree{jplayerPopcornPopcornJplayerJs, map[string]*bintree{}},
			"popcorn.jplayer.min.js": &bintree{jplayerPopcornPopcornJplayerMinJs, map[string]*bintree{}},
		}},
		"skin": &bintree{nil, map[string]*bintree{
			"blue.monday": &bintree{nil, map[string]*bintree{
				"css": &bintree{nil, map[string]*bintree{
					"jplayer.blue.monday.css": &bintree{jplayerSkinBlueMondayCssJplayerBlueMondayCss, map[string]*bintree{}},
					"jplayer.blue.monday.min.css": &bintree{jplayerSkinBlueMondayCssJplayerBlueMondayMinCss, map[string]*bintree{}},
				}},
				"image": &bintree{nil, map[string]*bintree{
					"jplayer.blue.monday.jpg": &bintree{jplayerSkinBlueMondayImageJplayerBlueMondayJpg, map[string]*bintree{}},
					"jplayer.blue.monday.seeking.gif": &bintree{jplayerSkinBlueMondayImageJplayerBlueMondaySeekingGif, map[string]*bintree{}},
					"jplayer.blue.monday.video.play.png": &bintree{jplayerSkinBlueMondayImageJplayerBlueMondayVideoPlayPng, map[string]*bintree{}},
				}},
				"mustache": &bintree{nil, map[string]*bintree{
					"jplayer.blue.monday.audio.playlist.html": &bintree{jplayerSkinBlueMondayMustacheJplayerBlueMondayAudioPlaylistHtml, map[string]*bintree{}},
					"jplayer.blue.monday.audio.single.html": &bintree{jplayerSkinBlueMondayMustacheJplayerBlueMondayAudioSingleHtml, map[string]*bintree{}},
					"jplayer.blue.monday.audio.stream.html": &bintree{jplayerSkinBlueMondayMustacheJplayerBlueMondayAudioStreamHtml, map[string]*bintree{}},
					"jplayer.blue.monday.video.playlist.html": &bintree{jplayerSkinBlueMondayMustacheJplayerBlueMondayVideoPlaylistHtml, map[string]*bintree{}},
					"jplayer.blue.monday.video.single.html": &bintree{jplayerSkinBlueMondayMustacheJplayerBlueMondayVideoSingleHtml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
	"jquery-1.11.3.min.js": &bintree{jquery1113MinJs, map[string]*bintree{}},
	"list.html": &bintree{listHtml, map[string]*bintree{}},
	"picture.html": &bintree{pictureHtml, map[string]*bintree{}},
	"style.css": &bintree{styleCss, map[string]*bintree{}},
	"video.html": &bintree{videoHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

